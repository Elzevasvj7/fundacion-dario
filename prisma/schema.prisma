generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alumnos {
  alumno_id          Int                  @id @default(autoincrement())
  nombre             String?
  apellido           String?
  codigo             String?              @db.VarChar(255)
  edad               Int?
  direccion          String?              @db.VarChar(255)
  cedula             String?              @db.VarChar(20)
  telefono           String?              @db.VarChar(255)
  correo             String?              @db.VarChar(255)
  fecha_nac          DateTime?            @db.Date
  estatus            String?              
  user_id            Int?                 @unique
  usuarios           usuarios?            @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
  inscripcion        inscripcion[]
  materia_estudiante materia_estudiante[]

  @@index([user_id], map: "idx_user_id")
}

model aula {
  aula_id     Int     @id @default(autoincrement())
  nombre_aula String? @db.VarChar(255)
}

model curso {
  curso_id     Int           @id @default(autoincrement())
  nombre_curso String?       @db.VarChar(255)
  periodo      String?       @db.VarChar(255)
  estatus      String?       @db.VarChar(45)
  monto        Float?
  fechainicio  DateTime?     @db.Date
  fechafin     DateTime?     @db.Date
  inscripcion  inscripcion[]
  materia      materia[]
}

model inscripcion {
  inscripcion_id Int      @id @default(autoincrement())
  alumno_id      Int?
  curso_id       Int?
  turno_id       Int
  estatus        String?  @db.VarChar(45)
  alumnos        alumnos? @relation(fields: [alumno_id], references: [alumno_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_alumno_id")
  curso          curso?   @relation(fields: [curso_id], references: [curso_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_curso_id")
  turno          turno    @relation(fields: [turno_id], references: [turno_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_turno_id")
  pagos          pagos?

  @@index([alumno_id], map: "idx_alumno_id")
  @@index([curso_id], map: "idx_curso_id")
  @@index([turno_id], map: "idx_turno_id")
}

model materia {
  materia_id         Int                  @id @default(autoincrement())
  curso_id           Int?
  profesor_id        Int?
  estatus            String?              
  nombre             String?              @db.VarChar(255)
  curso              curso?               @relation(fields: [curso_id], references: [curso_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_curso_id_materia")
  profesor           profesor?            @relation(fields: [profesor_id], references: [profesor_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_profesor_id")
  materia_estudiante materia_estudiante[]

  @@index([curso_id], map: "idx_curso_id_materia")
  @@index([profesor_id], map: "idx_profesor_id")
}

model materia_estudiante {
  materia_est_id Int      @id @default(autoincrement())
  nota           Int?
  alumno_id      Int?
  materia_id     Int?
  alumnos        alumnos? @relation(fields: [alumno_id], references: [alumno_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_alumno_id_materia_est")
  materia        materia? @relation(fields: [materia_id], references: [materia_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_materia_id")

  @@index([alumno_id], map: "idx_alumno_id_materia_est")
  @@index([materia_id], map: "idx_materia_id")
}

model pagos {
  pago_id        Int          @id @default(autoincrement())
  monto          Float?
  nombre         String?      @db.VarChar(255)
  apellido       String?      @db.VarChar(255)
  correo         String?      @db.VarChar(255)
  ref            String?      @db.VarChar(255)
  modalidad      String?      @db.VarChar(255)
  estatus        String?      @default("pendiente") @db.VarChar(45)
  fecha_pago     DateTime?    @db.Date
  inscripcion_id Int?         @unique
  inscripcion    inscripcion? @relation(fields: [inscripcion_id], references: [inscripcion_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_inscripcion_id")
}

model profesor {
  profesor_id Int       @id @default(autoincrement())
  nombre      String?
  apellido    String?
  direccion   String?   @db.VarChar(255)
  cedula      String?   @db.VarChar(20)
  telefono    String?   @db.VarChar(255)
  correo      String?   @db.VarChar(255)
  nivel_est   String?
  estatus     String?   
  user_id     Int?
  materia     materia[]
  usuarios    usuarios? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id_profesor")
}

model rol {
  rol_id                     Int        @id @default(autoincrement())
  nombre_rol                 String?
  usuarios_usuarios_rolTorol usuarios[] @relation("usuarios_rolTorol")
}

model turno {
  turno_id    Int           @id @default(autoincrement())
  tipo_turno  String?       @db.VarChar(255)
  inscripcion inscripcion[]
}

model usuarios {
  user_id               Int        @id @default(autoincrement())
  nombre                String?
  usuario               String?    @db.VarChar(255)
  password              String?    @db.VarChar(255)
  rol                   Int?
  estatus               String?    
  alumnos               alumnos?
  profesor              profesor[]
  rol_usuarios_rolTorol rol?       @relation("usuarios_rolTorol", fields: [rol], references: [rol_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rol")

  @@index([rol], map: "idx_rol")
}
